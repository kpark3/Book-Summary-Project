package com.example.book_summary_project.screens

import android.os.Build
import android.util.Log
import android.widget.Toast
import androidx.annotation.RequiresApi
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.DropdownMenuItem
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.ExposedDropdownMenuBox
import androidx.compose.material3.ExposedDropdownMenuDefaults
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.book_summary_project.api.GeminiApiService
import com.example.book_summary_project.api.db.SavedSummary
import com.example.book_summary_project.api.db.getNextSummaryId
import com.google.firebase.Timestamp
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FirebaseFirestore
import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

/**
 * SummaryScreen Composable:
 * This composable function provides the UI for the book summarization feature.
 * It allows users to input a book name and an optional prompt, select a language and summary length,
 * generate a summary using the Gemini API, and save the generated summary to a Firestore database.
 */
@RequiresApi(Build.VERSION_CODES.O)
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SummaryScreen(

) {
    // database value for firebase Cloud Firestore
    val db = FirebaseFirestore.getInstance()

    // state variables for the UI
    var bookName by remember { mutableStateOf("") }
    var additionalPrompt by remember { mutableStateOf("") }
    var summaryText by remember { mutableStateOf("Summary will appear here")}
    var isSummaryGenerated by remember { mutableStateOf(false) }
    var isSaved by remember { mutableStateOf(false) }
    var isSummaryButtonEnabled by remember { mutableStateOf(true) }

    // Language Dropdown State
    val languages = listOf("English", "French", "Korean", "Japanese", "Chinese", "Spanish", "German")
    var selectedLanguage by remember { mutableStateOf(languages[0]) }
    var languageExpanded by remember { mutableStateOf(false) }

    // Length Dropdown State
    val summaryLengths = listOf("Short", "Medium", "Long")
    var selectedLength by remember { mutableStateOf(summaryLengths[0]) }
    var lengthExpanded by remember { mutableStateOf(false) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(horizontal = 5.dp, vertical = 5.dp)
    ) {
        Text(
            text = "Book Summarizer",
            modifier = Modifier
                .fillMaxWidth()
                .padding(top = 5.dp, bottom = 10.dp),
            textAlign = TextAlign.Center,
            color = Color.Black,
            fontSize = 22.sp
        )

        OutlinedTextField(
            value = bookName,
            onValueChange = {
                bookName = it
                isSummaryButtonEnabled = true
            },
            label = { Text("Enter Book Name") },
            modifier = Modifier
                .fillMaxWidth(),
            singleLine = true
        )

        Spacer(modifier = Modifier.height(8.dp))

        OutlinedTextField(
            value = additionalPrompt,
            onValueChange = {
                additionalPrompt = it
                isSummaryButtonEnabled = true
            },
            label = { Text("Enter Optional Prompt. Ex. Without Spoilers") },
            modifier = Modifier
                .fillMaxWidth(),
            maxLines = 2
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Language and Length dropdowns in a row
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Language Dropdown
            ExposedDropdownMenuBox(
                expanded = languageExpanded,
                onExpandedChange = { languageExpanded = !languageExpanded }
            ) {
                OutlinedTextField(
                    value = selectedLanguage,
                    onValueChange = {},
                    readOnly = true,
                    label = { Text("Language") },
                    trailingIcon = {
                        ExposedDropdownMenuDefaults.TrailingIcon(expanded = languageExpanded)
                    },
                    modifier = Modifier
                        .weight(1f)
                        .menuAnchor()
                )

                ExposedDropdownMenu(
                    expanded = languageExpanded,
                    onDismissRequest = { languageExpanded = false }
                ) {
                    languages.forEach { language ->
                        DropdownMenuItem(
                            text = { Text(language) },
                            onClick = {
                                selectedLanguage = language
                                languageExpanded = false
                                isSummaryButtonEnabled = true
                            }
                        )
                    }
                }
            }

            // Length Dropdown
            ExposedDropdownMenuBox(
                expanded = lengthExpanded,
                onExpandedChange = { lengthExpanded = !lengthExpanded }
            ) {
                OutlinedTextField(
                    value = selectedLength,
                    onValueChange = {},
                    readOnly = true,
                    label = { Text("Length") },
                    trailingIcon = {
                        ExposedDropdownMenuDefaults.TrailingIcon(expanded = lengthExpanded)
                    },
                    modifier = Modifier
                        .weight(1f)
                        .menuAnchor()
                )

                ExposedDropdownMenu(
                    expanded = lengthExpanded,
                    onDismissRequest = { lengthExpanded = false }
                ) {
                    summaryLengths.forEach { length ->
                        DropdownMenuItem(
                            text = { Text(length) },
                            onClick = {
                                selectedLength = length
                                lengthExpanded = false
                                isSummaryButtonEnabled = true
                            }
                        )
                    }
                }
            }
        }

        Spacer(modifier = Modifier.height(4.dp))

        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(4.dp)
        ) {

            // Save Button to save the summary to the database
            Button(
                onClick = {
                    Log.d("SaveButton", "Save button clicked")
                    isSaved = true

                    // Get the next available summary ID and save the summary to Firestore.
                    getNextSummaryId { newId ->
                        if(newId != null) {
                            val now = LocalDateTime.now()
                            val formatter = DateTimeFormatter.ofPattern("MMM dd/yy h:mm a")
                            val firebaseTimestamp = Timestamp.now()
                            val timestampFormatted = now.format(formatter)

                            val summaryToSave = SavedSummary(
                                summaryId = newId,
                                bookName = bookName,
                                userId = FirebaseAuth.getInstance().currentUser?.uid ?: "unknown_user",
                                addPrompt = additionalPrompt,
                                length = selectedLength,
                                summary = summaryText,
                                timestampFormatted = timestampFormatted,
                                timestampRaw = firebaseTimestamp
                            )

                            db.collection("summaries")
                                .add(summaryToSave)
                                .addOnSuccessListener { documentReference ->
                                    Log.d(
                                        "Firestore",
                                        "Summary saved with ID: ${documentReference.id}"
                                    )
                                }
                                .addOnFailureListener { e ->
                                    Log.w("Firestore", "Error adding summary", e)
                                }
                        } else {
                            Log.e("Firestore", "Could not generate summaryId")
                        }
                    }
                },
                enabled = isSummaryGenerated && !isSaved,
                colors = ButtonDefaults.buttonColors(disabledContentColor = Color.Black),
                modifier = Modifier.weight(1f)
            ) {
                Text(if (isSaved) "Saved" else "Save")
            }

            // Summarize Button to trigger the summarization logic
            Button(
                onClick = {
                    summaryText = "Loading Summary. Please wait..."
                    val bookTitle = bookName
                    val prompt = additionalPrompt
                    val lengthInstruction = when (selectedLength) {
                        "Short" -> "in 200 words or less"
                        "Medium" -> "in 400 words or less"
                        "Long" -> "in 600 words or less"
                        else -> "" // not expected but just in case
                    }
                    val languageInstruction = "Please write the summary in the $selectedLanguage language."
//                    val question = if (prompt.isNotEmpty()){
//                        "Please summarize the book $bookTitle, $lengthInstruction, and $prompt."
//                        } else {
//                        "Please summarize the book $bookTitle $lengthInstruction."
                    val question = buildString {
                        append("Please summarize the book $bookTitle")
                        append(", $lengthInstruction")
                        if (prompt.isNotEmpty()) {
                            append(" and $prompt.")
                        }
                        append(" $languageInstruction")
                    }

                    Log.d("SummaryPrompt", question) // perform a print to logcat to see the question

                    GeminiApiService.getSummaryResponse(question) { summary ->
                        summaryText = summary
                        isSummaryGenerated = true
                    }
                    isSaved = false
                    isSummaryButtonEnabled = false
                  }, // on click event code over
                enabled = isSummaryButtonEnabled,
                colors = ButtonDefaults.buttonColors(disabledContentColor = Color.Black),
                modifier = Modifier.weight(1.5f)
            ) {
                Text("Generate Summary")
            }

        }

        Spacer(modifier = Modifier.height(8.dp))

        // Summary Text Box to display the generated summary
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .heightIn(min = 400.dp)
                .verticalScroll(rememberScrollState())
                .background(Color(0xFFFFFEFE))
                .padding(10.dp)
        ) {
            Text(
                text = summaryText,
                fontSize = 18.sp,
                color = Color.Black
            )
        }
    }
}
